#!/usr/local/bin/python -u
helpstr='''
  _           _                        _   
 (_)_ __  ___| |_ __ _ _ __   ___  ___| |_ 
 | | '_ \/ __| __/ _` | '_ \ / _ \/ __| __|
 | | | | \__ \ || (_| | |_) | (_) \__ \ |_ 
 |_|_| |_|___/\__\__,_| .__/ \___/|___/\__|
                      |_|v1.0.2 12/07/2016
                 
post data to CWMSv3+ databases in realtime
'''

import argparse, re, sys, os, yaml, tslite, pytz, json, cx_Oracle, datetime
import dateutil.parser as dateparser

#Read Configuration File
myloc = sys.argv[0].replace("instapost","") #determine where executable lives
conf = json.loads(open(myloc+"instapost.json","r").read())
#Add relevent entriys to environment variables
os.putenv("ORACLE_HOME",conf["ORACLE_HOME"])
sys.path.append(conf["PATH"])

###############################################################################

def no_comment( raw ):
  comment = re.compile( '#.*' )
  has_content = re.compile( '\S' )
  cooked = []
  for line in raw.split( '\n' ):
    line = comment.sub( '', line )                     # Strip comments
    if not has_content.search( line ): continue        # Ignore empty lines
    cooked.append( line )
  return cooked

def log(message, level = "MSG"):
  '''
  log code which returns parsable logs in the following format
  <ISO 8601 date> <Logging Level> <message>
  '''
  output = sys.stdout
  if args.verbose or (level != "STOR" and level != "MSG"):
    if level != "STOR": output = sys.stderr
    output.write("%s\t%s\t%s\n" %(datetime.datetime.now().isoformat(), level, message))
  if level =="FATAL": sys.exit (-1)

###############################################################################
# Class that connects to the database

class dataService:
  def __init__ (self):
    self.status = "OK"
    self.configuration = self.getDefaultConfiguration()
    self.dbconn = None

  def connect(self):
    try:
      dbname = self.configuration["dbname"]
      self.dbconn = cx_Oracle.Connection(user=self.configuration["dbuser"],
          password=self.configuration["dbpassword"], dsn=dbname)
      if not self.dbconn :
        self.status = "Could not connect to %s" % dbname
    except Exception,e:
      self.status = "Could not connect to %s: %s" % (dbname, str(e))

  def disconnect(self):
    self.dbconn.close()

  def getDefaultConfiguration (self):
    conf={"timeFormat" : "%d-%b-%Y %H%M",
          "timeZone"   : "GMT",
          "dbuser"     : "",
          "dbpassword" : "",
          "dbname" : self.getDBname(),
          "office" : "NWDP",
          "defaultUnits" :  {}
    }
    return conf

  def updateConfiguration (self,newConf):
    for key in newConf:
      self.configuration[key] = newConf[key]
      if self.configuration["dbname"] == "detect":
        self.configuration["dbname"] = self.getDBname()

  def getDBname (self):
    return os.uname()[1].upper()[0:3] #determine which database to connect to

  def readTS (self, tsid, start_time, end_time, units, timezone = "GMT"):
    timefmt = self.configuration["timeFormat"]
    office = self.configuration["office"]
    try:
      crsr = self.dbconn.cursor()
      # retrieve the time series data #
      ts_cur = self.dbconn.cursor()
      if units.lower() == "default":
        units = self.getDefaultUnits(tsid)
      crsr.execute('''
          begin
          cwms_ts.retrieve_ts(
                P_AT_TSV_RC =>:ts_cur,
                P_CWMS_TS_ID =>:tsid,
                P_UNITS =>:units,
                P_START_TIME =>to_date(:start_time, 'dd-mon-yyyy hh24mi'),
                P_END_TIME =>to_date(:end_time,   'dd-mon-yyyy hh24mi'),
                P_TIME_ZONE =>:timezone,
                P_OFFICE_ID =>:office);
          end;''', [ts_cur, tsid, units, start_time.strftime(timefmt), end_time.strftime(
timefmt), timezone, office])
      records = ts_cur.fetchall()
      ts_cur.close()
      output =[]
      for record in records: #apply timezone
        output.append(list(record))
        output[-1][0] = record[0].replace(tzinfo=pytz.timezone(timezone))
      crsr.close()
    except Exception, e:
      self.status = "Could not retrieve %s: %s" % (tsid,str(e))
      log(self.status)
      return[]
    return output

  def writeToCWMS (self,tsid,units,valueList, timezone= "GMT", buffersize=500):
    self.status = "OK"
    crsr = self.dbconn.cursor()
    timefmt = self.configuration["timeFormat"]
    office = self.configuration["office"]
    if units.lower() == "default":
      units = self.getDefaultUnits(tsid)
    try:
      done = False
      i = 0
      while done == False:
        count = 1
        SQLstr = """declare
        ts     timestamp(6);
        tstz   timestamp(6) with time zone;
        val    binary_double;
        qual   number;
        l_tsv  cwms_20.tsv_array := cwms_20.tsv_array();
        begin
        """
        j = i+buffersize
        if j > len(valueList):
          j = len (valueList)
          done = True
        if i == j:
          break
        for k in xrange (i,j):
          line = valueList[k]
          timestamp = line[0].strftime(timefmt).upper()
          value = str(line[1])
          quality = str(line[2])
          if int(line[2]) == 17 or int(line[2]) == 5:
            value = "null"
          SQLstr +="    ts   := to_timestamp('"+timestamp+"','DD-MON-YYYY HH24MI');\n"
          SQLstr +="    tstz := from_tz(ts,'"+timezone+"');\n"
          SQLstr +="    val  := "+value+";\n"
          SQLstr +="    qual := "+quality+";\n"
          SQLstr +="    l_tsv.extend;\n"
          SQLstr +="    l_tsv("+str(count)+") := cwms_20.tsv_type(tstz, val, qual);\n"
          count += 1
          log("%s\t%s\t%s\t%s" % (tsid,line[0].isoformat(),value,units), level="STOR")
        SQLstr +="    DBMS_OUTPUT.ENABLE(1000000);\n"
        SQLstr +="    cwms_20.cwms_ts.store_ts('"+tsid+"','"+units+"',l_tsv,'REPLACE ALL',null,null,'"+office+"');\n"
        SQLstr +="    commit;\n"
        SQLstr +="end;\n"
        crsr.execute(SQLstr)
        i += buffersize
    except Exception, e:
      self.status = "Could not store %s: %s" % (tsid,str(e))
      log(self.status)
    crsr.close()

  def writeDiff (self,tsid,units,ts, timezone= "GMT", buffersize=500):
    ''' this writes the difference between values in the database and provided timeseries '''
    if ts:
      if len(ts.data) > 0:
        starttime = ts.data[0][0]
        endtime = ts.data[-1][0]
      else:
        return
      dbts = tslite.timeseries(self.readTS(tsid,starttime,endtime,units,timezone))
      if dbts == None:
        dbts = tslite.timeseries()
        log (tsid+" does not exist")
      self.writeToCWMS(tsid,units,dbts.diff(ts).data,timezone,buffersize)


###############################################################################

def process (raw, fmt):
  if fmt == "YAML":
    raw = yaml.safe_load(raw)
  else:
    raw = json.load(raw)
  for tsid in raw:
    log ("Processing: "+tsid)
    ts = tslite.timeseries()
    units = raw[tsid].get("units","default")
    _timezone = raw[tsid].get("timezone","GMT")
    mytz = pytz.timezone(_timezone)
    rawts = raw[tsid].get("timeseries",{})
    for key in rawts:
      try: 
        tstamp = dateparser.parse(key,fuzzy=True)
        if tstamp.tzinfo == None: tstamp = mytz.localize(tstamp)
        ts.insert (tstamp, float(rawts[key]))
      except Exception, e:
        log (str(e), level="ERROR")
    ds.writeDiff (tsid,units,ts,timezone=_timezone)


def post (infile, fmt = "YAML"):
  try:
    raw = []
    for line in infile:
      if line.strip() == "---":
        process ("".join(raw),fmt)
        raw = []
      else:
        raw.append(line)
    if raw != []: process ("".join(raw),fmt)
  except Exception, e:
    log(str(e), level="FATAL")

###############################################################################

p = argparse.ArgumentParser(description=helpstr, formatter_class=argparse.RawDescriptionHelpFormatter)
p.add_argument( '-v', '--verbose', action='store_true', help='Work verbosely' )
p.add_argument( '-t', '--tsv', action='store_true', help='input in TSV format' )
p.add_argument( '-p', '--pathname', help='database pathname to store TSV file' )
p.add_argument( '-y', '--yaml', action='store_true', help='input in YAML format' )
p.add_argument( '-j', '--json', action='store_true', help='input in JSON format' )
p.add_argument( '-f', '--file', help='specify input file (default is STDIN)' )
args = p.parse_args()

infile = sys.stdin
if args.file:
  try:
    log("Using file from disk: "+args.file)
    infile = open(args.file,"r")
  except:
    log("File Not found: "+args.file, level="FATAL")

ds = dataService()
ds.updateConfiguration(conf)
ds.connect()
if ds.status == "OK": log ("Connected to: "+ds.configuration["dbname"])
else: log(ds.status,level="FATAL")

if args.tsv: 
  rdb_to_file( rdb, id, dest, sensors, mode )
if args.json: 
  post (infile, fmt="JSON")
else:
  post(infile)

# vim: tabstop=2 expandtab shiftwidth=2 softtabstop=2
