#!/usr/local/bin/python
#!/usr/bin/env python
helpstr = '''
get_bc_asws v1.0.0b
6/20/2017
This program retireves observed Automated Snow Weather Station (ASWS) Data
from BC Environemnt.

URL: http://bcrfc.env.gov.bc.ca/data/asp/

POC: Gunnar Leffler
     Jeff Tilton

FORMATTING
==========


Output
------
Output of this program is timeseries data in "instapost" YAML format

PARAMETERS
==========
'''

import sys, os, datetime, requests, re, random, argparse, json, yaml, io, csv
import dateutil.parser as dateparser

#--------------------------------------------------------------------------------
#Configuration
#--------------------------------------------------------------------------------

dataURL = "http://bcrfc.env.gov.bc.ca/data/asp/realtime/data/%s.csv" 

raw_data = { "TA": "",
"PC": "",
"SW": "",
"SD": ""
}

units_xref = {"TX": "C", 
"TN": "C", 
"TA": "C",
"PC": "mm",
"SD": "mm",
"SW": "mm"
}

WScache = {}
#--------------------------------------------------------------------------------
#Helper Methods
#--------------------------------------------------------------------------------

def parseDate(s):
  try: return dateparser.parse(s)
  except: return None


def loadConfig(path):
  if args.verbose:
    sys.stderr.write("loading config file...")
  output = yaml.safe_load(open(path))
  if args.verbose:
    sys.stderr.write(" %d entries found.\n" % (len(output)))
  return output

def getWebService():
  global raw_data
  for PE in raw_data:
    URL = dataURL % PE
    if args.verbose:
      sys.stderr.write("Getting %s \n" % (URL))
    try:
      raw_data[PE] = requests.get(URL).text
    except:
      raw = ""
      sys.stderr.write("could not retrieve %s " % (PE))

def makeconfig(critpath):
  crit = open(critpath, "r").readlines()
  leftovers = []
  for line in crit:
    tokens = line.split(";")[0].split("=")
    loc, pe, tse, duration = tokens[0][2:].split(".")
    if pe in units_xref:
      if pe[0] == "T" and ".MIN." in tokens[1].upper():
        pe = "TN"
      elif pe[0] == "T" and ".MAX." in tokens[1].upper():
        pe = "TX"
      if not loc in config:
        config[loc] = {}
      if not pe in config[loc]:
        config[loc][pe] = {}
      config[loc][pe]["observed"] = tokens[1].replace(".1Day.1",".~1Day.1").replace("RFC","BCENVIRO")
    else:
      leftovers.append(line)
  print yaml.safe_dump(config, default_flow_style=False)
  print "---"
  print "".join(leftovers)

def getTS(site,pe,data):
  output = {
        "timeseries": {},
        "units": units_xref.get(pe[:2], "default"),
        "timezone": "GMT"
  }
  totals = {}
  inf = csv.DictReader(io.StringIO(data))
  for row in inf:
    dt = parseDate(row.get("DATE (UTC)",None))
    if dt == None: continue
    if site in row:
      try:
        output["timeseries"][dt] = float(row[site])
      except:
        pass
  return output

#--------------------------------------------------------------------------------
# main()
#--------------------------------------------------------------------------------
catalog = {}
args = {}
config = {}
if __name__ == "__main__":
  p = argparse.ArgumentParser(
      description=helpstr, formatter_class=argparse.RawDescriptionHelpFormatter)
  p.add_argument('config', help='YAML formatted Configuration file')
  p.add_argument('-l', '--lookback', help='Lookback a number of days')
  p.add_argument('-v', '--verbose', action='store_true', help='Work verbosely')
  p.add_argument(
      '-m',
      '--makeconfig',
      action='store_true',
      help='Makes a config file from the specified crit file')
  args = p.parse_args()

  if args.makeconfig:
    makeconfig(args.config)
    sys.exit(0)

  getWebService()

  config = loadConfig(args.config)

  if args.lookback:
    lookback = args.lookback
  else:
    lookback = '5'
  output = {}

  for loc in config:
    for pe in config[loc]:
      if not pe in raw_data:
        if args.verbose: sys.stderr.write("PE code %s not supported\n" % pe)
        continue
      output = {config[loc][pe]:getTS(loc, pe, raw_data[pe])}
      print yaml.safe_dump(output, default_flow_style=False)
      print "---"

# vim: tabstop=2 expandtab shiftwidth=2 softtabstop=2
