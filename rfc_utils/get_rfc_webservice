#!/usr/local/bin/python
#!/usr/bin/env python
helpstr = '''
get_rfc_webservice v1.5.0
6/05/2017
This program retireves observed and forecast data from the NWRFC.
POC: Gunnar Leffler

FORMATTING
==========

configuration file example
--------------------------

MLKW:
  HG:
    forecast: MLKW.Stage.Inst.~6Hours.0.RFC-FCST
    observed: MLKW.Stage.Ave.15Minutes.0.RFC-RAW
    blended:  MLKW.Stage.Inst.15Minutes.0.BLEND-RFC-OBS-RFC-FCST
  QR:
    forecast: MLKW.Flow.Inst.~6Hours.0.RFC-FCST
    #Multiple paths can be mapped
    observed: 
      - MLKW.Flow.Ave.15Minutes.0.RFC-RAW
      - MLKW.Flow.Ave.15Minutes.0.RFC-REV
    blended:  MLKW.Flow.Inst.15Minutes.0.BLEND-RFC-OBS-RFC-FCST
KLLW1:
  HG:
    observed: KLLW.Stage.Inst.15Minutes.0.RFC-RAW
  QR:
    observed: KLLW.Flow.Inst.15Minutes.0.RFC-RAW
    #sometimes the RFC files data on other PE codes, you can specify which
    #Alternate PE codes with the "use_pe: " option as follows.
    use_pe: HG
LYDM8:
  HP:
    observed: LIB.Elev-Forebay.Inst.1Hour.0.RFC-RAW
    #Option below only posts data from the top of the hour
    timefilter: 00:00

Output
------
Output of this program is timeseries data in "instapost" YAML format

PARAMETERS
==========
'''

import sys, os, datetime, requests, re, random, argparse, json, yaml
from xml.dom import minidom

#--------------------------------------------------------------------------------
#Configuration
#--------------------------------------------------------------------------------

dataURL = "http://www.nwrfc.noaa.gov/xml/xml.cgi?id=LOC&pe=PE&dtype=b&numdays=NUMDAYS"
rfcServer = "http://www.nwrfc.noaa.gov"
PE_xref = {
    "QI": "inflow",
    "QA": "adjusted_discharge",
    "QR": "discharge",
    "HF": "forebay_elevation",
    "HP": "forebay_elevation",
    "HG": "stage"
}

units_xref = {"cubic feet per second": "cfs", "feet": "ft"}

WScache = ["nothing", "nothing"]


#--------------------------------------------------------------------------------
#XML to dictionary conversion
#--------------------------------------------------------------------------------
def parse_element(element):
  '''Converts XML to dictionary data structure
    '''
  dict_data = dict()
  if element.nodeType == element.TEXT_NODE:
    if element.data.strip() != "":
      dict_data = element.data
  if element.nodeType not in [
      element.TEXT_NODE, element.DOCUMENT_NODE, element.DOCUMENT_TYPE_NODE
  ]:
    for item in element.attributes.items():
      dict_data["@" + item[0]] = item[1]
  if element.nodeType not in [element.TEXT_NODE, element.DOCUMENT_TYPE_NODE]:
    for child in element.childNodes:
      child_name, child_dict = parse_element(child)
      if child_name in dict_data:
        if child_dict != {}:
          try:
            dict_data[child_name].append(child_dict)
          except AttributeError:
            dict_data[child_name] = [dict_data[child_name], child_dict]
      else:
        if child_dict != {}:
          dict_data[child_name] = child_dict
    if dict_data.keys() == ["#text"]:
      dict_data = dict_data["#text"]
  return element.nodeName, dict_data


def xml2dict(txt):
  dom = minidom.parseString(txt.encode('utf-8'))
  return parse_element(dom)[1]


def xml2json(txt):
  return json.dumps(xml2dict(txt), sort_keys=True, indent=1)


#--------------------------------------------------------------------------------
#Helper Methods
#--------------------------------------------------------------------------------


def readFile(path):
  f = open(path, "r")
  output = f.read()
  f.close()
  return output


def doTemplate(s, j):
  for key in j:
    s = s.replace(key, j[key])
  return s


def loadConfig(path):
  if args.verbose:
    sys.stderr.write("loading config file...")
  output = yaml.safe_load(open(path))
  if args.verbose:
    sys.stderr.write(" %d entries found.\n" % (len(output)))
  return output


def getWebService(loc, pe, lookback):
  output = {}
  pe = pe[:2]
  if args.verbose:
    sys.stderr.write("Getting %s %s \n" % (loc, pe))
  URL = dataURL.replace("LOC", loc).replace("PE", pe).replace("NUMDAYS",
                                                              lookback)
  if WScache[0] == URL:
    if args.verbose:
      sys.stderr.write("Using Cached version \n")
    return WScache[1]
  else:
    WScache[0] = URL
  try:
    raw = requests.get(URL).text
  except:
    raw = ""
    sys.stderr.write("could not retrieve %s %s " % (loc, pe))
  if args.rawXML:
    print raw
  if args.rawJSON:
    print xml2json(raw)
  try:
    output = xml2dict(raw)
  except:
    sys.stderr.write("Could not parse %s %s " % (loc, pe))
  WScache[1] = output
  return output


def parseWSdata(ws, pe, wsPE, conf, loc, timefilter):

  def getTS(t, myPE):
    out = {"timeseries": {}, "units": "", "timezone": "GMT"}
    longpe = PE_xref.get(pe[:2], "")
    try:
      for item in t:
        if (item.get("@petype", "") + item.get("@durCode", "") + item.get(
            "@tsCode", ""))[:len(myPE)] == myPE:
          if longpe in item:
            if timefilter in item["dataDateTime"]:
              out["timeseries"][item["dataDateTime"]] = float(
                  item[longpe]["#text"])
            if "@units" in item[longpe]:
              out["units"] = units_xref.get(item[longpe]["@units"],
                                            "unknown:" + pe)
    except:
      pass
    return out

  ws = ws.get("HydroMetData", {}).get("SiteData", {})
  if ws == {} and args.verbose:
    sys.stderr.write("No Data Found for %s" % pe)
  output = {}
  if "forecast" in conf:
    if "forecastData" in ws:
      if not isinstance(conf["forecast"], list):
        conf["forecast"] = [conf["forecast"]]
      for path in conf["forecast"]:
        if "forecastValue" in ws["forecastData"]:
          output[path] = getTS(ws["forecastData"]["forecastValue"], wsPE[:2])
    elif args.verbose:
      sys.stderr.write("No Forecast Found %s %s \n" % (loc, pe))
  if "observed" in conf and "observedData" in ws:
    if not isinstance(conf["observed"], list):
      conf["observed"] = [conf["observed"]]
    for path in conf["observed"]:
      if "observedValue" in ws["observedData"]:
        output[path] = getTS(ws["observedData"]["observedValue"], wsPE)
  if "blended" in conf:
    if not isinstance(conf["blended"], list):
      conf["blended"] = [conf["blended"]]
    for path in conf["blended"]:
      if "observedData" in ws:
        if "observedValue" in ws["observedData"]:
          output[path] = getTS(ws["observedData"]["observedValue"], wsPE)
      if "forecast" in conf and "forecastData" in ws:
        if "forecastValue" in ws["forecastData"]:
          output[path]["timeseries"].update(
              getTS(ws["forecastData"]["forecastValue"],
                    wsPE[:2])["timeseries"])
  return output


def makeconfig(critpath):
  crit = open(critpath, "r").readlines()
  leftovers = []
  for line in crit:
    tokens = line.split(";")[0].split("=")
    loc, pe, tse, duration = tokens[0][2:].split(".")
    if pe in PE_xref and len(loc) > 4 and "Q2" not in loc:
      if not loc in config:
        config[loc] = {}
      if not pe in config[loc]:
        config[loc][pe] = {}
      if tse[0] == "F":
        config[loc][pe]["forecast"] = tokens[1]
      else:
        config[loc][pe]["observed"] = tokens[1]
      if "forecast" in config[loc][pe] and "observed" in config[loc][pe]:
        parts = config[loc][pe]["observed"].split(".")
        parts[-1] = "BLEND-RFC-OBS-RFC-FCST"
        config[loc][pe]["blended"] = ".".join(parts)
    else:
      leftovers.append(line)
  print yaml.safe_dump(config, default_flow_style=False)
  print "---"
  print "".join(leftovers)


#--------------------------------------------------------------------------------
# main()
#--------------------------------------------------------------------------------
catalog = {}
args = {}
config = {}
if __name__ == "__main__":
  p = argparse.ArgumentParser(
      description=helpstr, formatter_class=argparse.RawDescriptionHelpFormatter)
  p.add_argument('config', help='YAML formatted Configuration file')
  p.add_argument('-l', '--lookback', help='Lookback a number of days')
  p.add_argument('-v', '--verbose', action='store_true', help='Work verbosely')
  p.add_argument(
      '-rx', '--rawXML', action='store_true', help='Output raw XML from RFC')
  p.add_argument(
      '-rj', '--rawJSON', action='store_true', help='Output JSON from RFC')
  p.add_argument(
      '-m',
      '--makeconfig',
      action='store_true',
      help='Makes a config file from the specified crit file')
  args = p.parse_args()
  if args.makeconfig:
    makeconfig(args.config)
    sys.exit(0)
  config = loadConfig(args.config)
  if args.lookback:
    lookback = args.lookback
  else:
    lookback = '5'
  output = {}
  for loc in config:
    for pe in config[loc]:
      timefilter = config[loc][pe].get("timefilter", "")
      wsPE = config[loc][pe].get(
          "use_pe", pe)  #sometimes the RFC misfiles data under other PEs
      try:
        output = parseWSdata(
          getWebService(loc, wsPE, lookback), pe, wsPE, config[loc][pe], loc,
          timefilter)
      except:
         sys.stderr.write("Error occured while parsing %s %s.\n" % (loc, pe))
      if not args.rawXML and not args.rawJSON and output != {}:
        print yaml.safe_dump(output, default_flow_style=False)
        print "---"

# vim: tabstop=2 expandtab shiftwidth=2 softtabstop=2
